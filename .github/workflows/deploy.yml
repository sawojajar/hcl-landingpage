name: Deploy to Hostinger VPS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Run linter
      run: yarn lint

    - name: Build application
      run: yarn build
      env:
        ENABLE_INDEXING_SEO: ${{ secrets.ENABLE_INDEXING_SEO }}
        ADMIN_WHATSAPP_NUMBER: ${{ secrets.ADMIN_WHATSAPP_NUMBER }}
        ADMIN_WHATSAPP_CHAT_FORMAT: ${{ secrets.ADMIN_WHATSAPP_CHAT_FORMAT }}
        FIRST_CATEGORY: ${{ secrets.FIRST_CATEGORY }}
        BASE_URL: ${{ secrets.BASE_URL }}

    - name: Create deployment package
      run: |
        tar -czf deployment.tar.gz \
          .next \
          public \
          package.json \
          yarn.lock \
          next.config.js \
          tsconfig.json

    - name: Deploy to VPS
      if: github.ref == 'refs/heads/main'
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT || 22 }}
        script: |
          echo "🚀 Starting deployment process..."
          
          # Create deployment directory if it doesn't exist
          mkdir -p /var/www/hcl-landingpage
          cd /var/www/hcl-landingpage
          
          echo "📁 Current directory: $(pwd)"
          echo "📋 Directory contents:"
          ls -la
          
          # Backup current deployment
          if [ -d ".next" ]; then
            echo "💾 Backing up current deployment..."
            sudo rm -rf .next.backup
            sudo mv .next .next.backup
            echo "✅ Backup completed"
          else
            echo "ℹ️ No existing deployment to backup"
          fi
          
          # Stop the application if running
          echo "⏹️ Stopping application service..."
          sudo systemctl stop hcl-landingpage || echo "ℹ️ Service not running or doesn't exist yet"
          echo "✅ Service stopped"

    - name: Upload deployment package
      if: github.ref == 'refs/heads/main'
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT || 22 }}
        source: "deployment.tar.gz"
        target: "/var/www/hcl-landingpage/"
        strip_components: 0

    - name: Finalize deployment
      if: github.ref == 'refs/heads/main'
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT || 22 }}
        script: |
          set -e  # Exit on any error
          
          echo "🚀 Starting finalization process..."
          cd /var/www/hcl-landingpage
          
          echo "📁 Current directory: $(pwd)"
          echo "📋 Directory contents before extraction:"
          ls -la
          
          echo "📦 Extracting deployment package..."
          if [ -f "deployment.tar.gz" ]; then
            echo "✅ Found deployment.tar.gz, extracting..."
            tar -xzf deployment.tar.gz
            rm deployment.tar.gz
            echo "✅ Deployment package extracted and cleaned up"
          else
            echo "❌ deployment.tar.gz not found!"
            echo "📋 Available files:"
            ls -la
            exit 1
          fi
          
          echo "📋 Extracted files:"
          ls -la
          
          echo "📦 Installing production dependencies..."
          if command -v yarn >/dev/null 2>&1; then
            yarn install --production --frozen-lockfile
            echo "✅ Dependencies installed with yarn"
          elif command -v npm >/dev/null 2>&1; then
            npm ci --only=production
            echo "✅ Dependencies installed with npm"
          else
            echo "❌ Neither yarn nor npm found!"
            exit 1
          fi
          
          echo "🔧 Setting proper permissions..."
          sudo chown -R www-data:www-data /var/www/hcl-landingpage
          sudo chmod -R 755 /var/www/hcl-landingpage
          echo "✅ Permissions set"
          
          echo "⚙️ Creating environment file..."
          sudo tee /var/www/hcl-landingpage/.env.local > /dev/null <<EOF
          ENABLE_INDEXING_SEO=${{ secrets.ENABLE_INDEXING_SEO }}
          ADMIN_WHATSAPP_NUMBER=${{ secrets.ADMIN_WHATSAPP_NUMBER }}
          ADMIN_WHATSAPP_CHAT_FORMAT=${{ secrets.ADMIN_WHATSAPP_CHAT_FORMAT }}
          FIRST_CATEGORY=${{ secrets.FIRST_CATEGORY }}
          BASE_URL=${{ secrets.BASE_URL }}
          NODE_ENV=production
          PORT=3000
          EOF
          echo "✅ Environment file created"
          
          echo "🔄 Starting application service..."
          if sudo systemctl is-enabled hcl-landingpage >/dev/null 2>&1; then
            echo "✅ Service is enabled, restarting..."
            sudo systemctl restart hcl-landingpage
            sleep 5
            echo "📊 Checking service status..."
            sudo systemctl status hcl-landingpage --no-pager
          else
            echo "⚠️ Service not enabled, starting manually..."
            cd /var/www/hcl-landingpage
            nohup yarn start > app.log 2>&1 &
            echo "✅ Application started manually"
          fi
          
          echo "🎉 Deployment completed successfully!"

    - name: Cleanup
      if: always()
      run: rm -f deployment.tar.gz
